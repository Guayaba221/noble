syntax = "proto3";
package noble.tokenfactory;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "tokenfactory/params.proto";
import "tokenfactory/blacklisted.proto";
// this line is used by starport scaffolding # 1

option go_package = "noble/x/tokenfactory/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/noble/tokenfactory/params";
  }
  // Queries a Blacklisted by index.
	rpc Blacklisted(QueryGetBlacklistedRequest) returns (QueryGetBlacklistedResponse) {
		option (google.api.http).get = "/noble/tokenfactory/blacklisted/{address}";
	}

	// Queries a list of Blacklisted items.
	rpc BlacklistedAll(QueryAllBlacklistedRequest) returns (QueryAllBlacklistedResponse) {
		option (google.api.http).get = "/noble/tokenfactory/blacklisted";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetBlacklistedRequest {
	  string address = 1;

}

message QueryGetBlacklistedResponse {
	Blacklisted blacklisted = 1 [(gogoproto.nullable) = false];
}

message QueryAllBlacklistedRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlacklistedResponse {
	repeated Blacklisted blacklisted = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
