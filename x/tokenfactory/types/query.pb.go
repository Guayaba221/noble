// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tokenfactory/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetBlacklistedRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetBlacklistedRequest) Reset()         { *m = QueryGetBlacklistedRequest{} }
func (m *QueryGetBlacklistedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlacklistedRequest) ProtoMessage()    {}
func (*QueryGetBlacklistedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{2}
}
func (m *QueryGetBlacklistedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlacklistedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlacklistedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlacklistedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlacklistedRequest.Merge(m, src)
}
func (m *QueryGetBlacklistedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlacklistedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlacklistedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlacklistedRequest proto.InternalMessageInfo

func (m *QueryGetBlacklistedRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetBlacklistedResponse struct {
	Blacklisted Blacklisted `protobuf:"bytes,1,opt,name=blacklisted,proto3" json:"blacklisted"`
}

func (m *QueryGetBlacklistedResponse) Reset()         { *m = QueryGetBlacklistedResponse{} }
func (m *QueryGetBlacklistedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlacklistedResponse) ProtoMessage()    {}
func (*QueryGetBlacklistedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{3}
}
func (m *QueryGetBlacklistedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlacklistedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlacklistedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlacklistedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlacklistedResponse.Merge(m, src)
}
func (m *QueryGetBlacklistedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlacklistedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlacklistedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlacklistedResponse proto.InternalMessageInfo

func (m *QueryGetBlacklistedResponse) GetBlacklisted() Blacklisted {
	if m != nil {
		return m.Blacklisted
	}
	return Blacklisted{}
}

type QueryAllBlacklistedRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlacklistedRequest) Reset()         { *m = QueryAllBlacklistedRequest{} }
func (m *QueryAllBlacklistedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlacklistedRequest) ProtoMessage()    {}
func (*QueryAllBlacklistedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{4}
}
func (m *QueryAllBlacklistedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlacklistedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlacklistedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlacklistedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlacklistedRequest.Merge(m, src)
}
func (m *QueryAllBlacklistedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlacklistedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlacklistedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlacklistedRequest proto.InternalMessageInfo

func (m *QueryAllBlacklistedRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlacklistedResponse struct {
	Blacklisted []Blacklisted       `protobuf:"bytes,1,rep,name=blacklisted,proto3" json:"blacklisted"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlacklistedResponse) Reset()         { *m = QueryAllBlacklistedResponse{} }
func (m *QueryAllBlacklistedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlacklistedResponse) ProtoMessage()    {}
func (*QueryAllBlacklistedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{5}
}
func (m *QueryAllBlacklistedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlacklistedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlacklistedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlacklistedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlacklistedResponse.Merge(m, src)
}
func (m *QueryAllBlacklistedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlacklistedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlacklistedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlacklistedResponse proto.InternalMessageInfo

func (m *QueryAllBlacklistedResponse) GetBlacklisted() []Blacklisted {
	if m != nil {
		return m.Blacklisted
	}
	return nil
}

func (m *QueryAllBlacklistedResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPausedRequest struct {
}

func (m *QueryGetPausedRequest) Reset()         { *m = QueryGetPausedRequest{} }
func (m *QueryGetPausedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPausedRequest) ProtoMessage()    {}
func (*QueryGetPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{6}
}
func (m *QueryGetPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPausedRequest.Merge(m, src)
}
func (m *QueryGetPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPausedRequest proto.InternalMessageInfo

type QueryGetPausedResponse struct {
	Paused Paused `protobuf:"bytes,1,opt,name=Paused,proto3" json:"Paused"`
}

func (m *QueryGetPausedResponse) Reset()         { *m = QueryGetPausedResponse{} }
func (m *QueryGetPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPausedResponse) ProtoMessage()    {}
func (*QueryGetPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{7}
}
func (m *QueryGetPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPausedResponse.Merge(m, src)
}
func (m *QueryGetPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPausedResponse proto.InternalMessageInfo

func (m *QueryGetPausedResponse) GetPaused() Paused {
	if m != nil {
		return m.Paused
	}
	return Paused{}
}

type QueryGetMasterMinterRequest struct {
}

func (m *QueryGetMasterMinterRequest) Reset()         { *m = QueryGetMasterMinterRequest{} }
func (m *QueryGetMasterMinterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMasterMinterRequest) ProtoMessage()    {}
func (*QueryGetMasterMinterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{8}
}
func (m *QueryGetMasterMinterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMasterMinterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMasterMinterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMasterMinterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMasterMinterRequest.Merge(m, src)
}
func (m *QueryGetMasterMinterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMasterMinterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMasterMinterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMasterMinterRequest proto.InternalMessageInfo

type QueryGetMasterMinterResponse struct {
	MasterMinter MasterMinter `protobuf:"bytes,1,opt,name=MasterMinter,proto3" json:"MasterMinter"`
}

func (m *QueryGetMasterMinterResponse) Reset()         { *m = QueryGetMasterMinterResponse{} }
func (m *QueryGetMasterMinterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMasterMinterResponse) ProtoMessage()    {}
func (*QueryGetMasterMinterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{9}
}
func (m *QueryGetMasterMinterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMasterMinterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMasterMinterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMasterMinterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMasterMinterResponse.Merge(m, src)
}
func (m *QueryGetMasterMinterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMasterMinterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMasterMinterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMasterMinterResponse proto.InternalMessageInfo

func (m *QueryGetMasterMinterResponse) GetMasterMinter() MasterMinter {
	if m != nil {
		return m.MasterMinter
	}
	return MasterMinter{}
}

type QueryGetMintersRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetMintersRequest) Reset()         { *m = QueryGetMintersRequest{} }
func (m *QueryGetMintersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMintersRequest) ProtoMessage()    {}
func (*QueryGetMintersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{10}
}
func (m *QueryGetMintersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMintersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMintersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMintersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMintersRequest.Merge(m, src)
}
func (m *QueryGetMintersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMintersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMintersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMintersRequest proto.InternalMessageInfo

func (m *QueryGetMintersRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetMintersResponse struct {
	Minters Minters `protobuf:"bytes,1,opt,name=minters,proto3" json:"minters"`
}

func (m *QueryGetMintersResponse) Reset()         { *m = QueryGetMintersResponse{} }
func (m *QueryGetMintersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMintersResponse) ProtoMessage()    {}
func (*QueryGetMintersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{11}
}
func (m *QueryGetMintersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMintersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMintersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMintersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMintersResponse.Merge(m, src)
}
func (m *QueryGetMintersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMintersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMintersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMintersResponse proto.InternalMessageInfo

func (m *QueryGetMintersResponse) GetMinters() Minters {
	if m != nil {
		return m.Minters
	}
	return Minters{}
}

type QueryAllMintersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMintersRequest) Reset()         { *m = QueryAllMintersRequest{} }
func (m *QueryAllMintersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMintersRequest) ProtoMessage()    {}
func (*QueryAllMintersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{12}
}
func (m *QueryAllMintersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMintersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMintersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMintersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMintersRequest.Merge(m, src)
}
func (m *QueryAllMintersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMintersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMintersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMintersRequest proto.InternalMessageInfo

func (m *QueryAllMintersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMintersResponse struct {
	Minters    []Minters           `protobuf:"bytes,1,rep,name=minters,proto3" json:"minters"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMintersResponse) Reset()         { *m = QueryAllMintersResponse{} }
func (m *QueryAllMintersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMintersResponse) ProtoMessage()    {}
func (*QueryAllMintersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{13}
}
func (m *QueryAllMintersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMintersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMintersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMintersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMintersResponse.Merge(m, src)
}
func (m *QueryAllMintersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMintersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMintersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMintersResponse proto.InternalMessageInfo

func (m *QueryAllMintersResponse) GetMinters() []Minters {
	if m != nil {
		return m.Minters
	}
	return nil
}

func (m *QueryAllMintersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPauserRequest struct {
}

func (m *QueryGetPauserRequest) Reset()         { *m = QueryGetPauserRequest{} }
func (m *QueryGetPauserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPauserRequest) ProtoMessage()    {}
func (*QueryGetPauserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{14}
}
func (m *QueryGetPauserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPauserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPauserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPauserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPauserRequest.Merge(m, src)
}
func (m *QueryGetPauserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPauserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPauserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPauserRequest proto.InternalMessageInfo

type QueryGetPauserResponse struct {
	Pauser Pauser `protobuf:"bytes,1,opt,name=Pauser,proto3" json:"Pauser"`
}

func (m *QueryGetPauserResponse) Reset()         { *m = QueryGetPauserResponse{} }
func (m *QueryGetPauserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPauserResponse) ProtoMessage()    {}
func (*QueryGetPauserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{15}
}
func (m *QueryGetPauserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPauserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPauserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPauserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPauserResponse.Merge(m, src)
}
func (m *QueryGetPauserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPauserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPauserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPauserResponse proto.InternalMessageInfo

func (m *QueryGetPauserResponse) GetPauser() Pauser {
	if m != nil {
		return m.Pauser
	}
	return Pauser{}
}

type QueryGetBlacklisterRequest struct {
}

func (m *QueryGetBlacklisterRequest) Reset()         { *m = QueryGetBlacklisterRequest{} }
func (m *QueryGetBlacklisterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlacklisterRequest) ProtoMessage()    {}
func (*QueryGetBlacklisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{16}
}
func (m *QueryGetBlacklisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlacklisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlacklisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlacklisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlacklisterRequest.Merge(m, src)
}
func (m *QueryGetBlacklisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlacklisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlacklisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlacklisterRequest proto.InternalMessageInfo

type QueryGetBlacklisterResponse struct {
	Blacklister Blacklister `protobuf:"bytes,1,opt,name=Blacklister,proto3" json:"Blacklister"`
}

func (m *QueryGetBlacklisterResponse) Reset()         { *m = QueryGetBlacklisterResponse{} }
func (m *QueryGetBlacklisterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlacklisterResponse) ProtoMessage()    {}
func (*QueryGetBlacklisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{17}
}
func (m *QueryGetBlacklisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlacklisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlacklisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlacklisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlacklisterResponse.Merge(m, src)
}
func (m *QueryGetBlacklisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlacklisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlacklisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlacklisterResponse proto.InternalMessageInfo

func (m *QueryGetBlacklisterResponse) GetBlacklister() Blacklister {
	if m != nil {
		return m.Blacklister
	}
	return Blacklister{}
}

type QueryGetOwnerRequest struct {
}

func (m *QueryGetOwnerRequest) Reset()         { *m = QueryGetOwnerRequest{} }
func (m *QueryGetOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOwnerRequest) ProtoMessage()    {}
func (*QueryGetOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{18}
}
func (m *QueryGetOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOwnerRequest.Merge(m, src)
}
func (m *QueryGetOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOwnerRequest proto.InternalMessageInfo

type QueryGetOwnerResponse struct {
	Owner Owner `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner"`
}

func (m *QueryGetOwnerResponse) Reset()         { *m = QueryGetOwnerResponse{} }
func (m *QueryGetOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOwnerResponse) ProtoMessage()    {}
func (*QueryGetOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_78516c77a1ba9513, []int{19}
}
func (m *QueryGetOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOwnerResponse.Merge(m, src)
}
func (m *QueryGetOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOwnerResponse proto.InternalMessageInfo

func (m *QueryGetOwnerResponse) GetOwner() Owner {
	if m != nil {
		return m.Owner
	}
	return Owner{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "noble.tokenfactory.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "noble.tokenfactory.QueryParamsResponse")
	proto.RegisterType((*QueryGetBlacklistedRequest)(nil), "noble.tokenfactory.QueryGetBlacklistedRequest")
	proto.RegisterType((*QueryGetBlacklistedResponse)(nil), "noble.tokenfactory.QueryGetBlacklistedResponse")
	proto.RegisterType((*QueryAllBlacklistedRequest)(nil), "noble.tokenfactory.QueryAllBlacklistedRequest")
	proto.RegisterType((*QueryAllBlacklistedResponse)(nil), "noble.tokenfactory.QueryAllBlacklistedResponse")
	proto.RegisterType((*QueryGetPausedRequest)(nil), "noble.tokenfactory.QueryGetPausedRequest")
	proto.RegisterType((*QueryGetPausedResponse)(nil), "noble.tokenfactory.QueryGetPausedResponse")
	proto.RegisterType((*QueryGetMasterMinterRequest)(nil), "noble.tokenfactory.QueryGetMasterMinterRequest")
	proto.RegisterType((*QueryGetMasterMinterResponse)(nil), "noble.tokenfactory.QueryGetMasterMinterResponse")
	proto.RegisterType((*QueryGetMintersRequest)(nil), "noble.tokenfactory.QueryGetMintersRequest")
	proto.RegisterType((*QueryGetMintersResponse)(nil), "noble.tokenfactory.QueryGetMintersResponse")
	proto.RegisterType((*QueryAllMintersRequest)(nil), "noble.tokenfactory.QueryAllMintersRequest")
	proto.RegisterType((*QueryAllMintersResponse)(nil), "noble.tokenfactory.QueryAllMintersResponse")
	proto.RegisterType((*QueryGetPauserRequest)(nil), "noble.tokenfactory.QueryGetPauserRequest")
	proto.RegisterType((*QueryGetPauserResponse)(nil), "noble.tokenfactory.QueryGetPauserResponse")
	proto.RegisterType((*QueryGetBlacklisterRequest)(nil), "noble.tokenfactory.QueryGetBlacklisterRequest")
	proto.RegisterType((*QueryGetBlacklisterResponse)(nil), "noble.tokenfactory.QueryGetBlacklisterResponse")
	proto.RegisterType((*QueryGetOwnerRequest)(nil), "noble.tokenfactory.QueryGetOwnerRequest")
	proto.RegisterType((*QueryGetOwnerResponse)(nil), "noble.tokenfactory.QueryGetOwnerResponse")
}

func init() { proto.RegisterFile("tokenfactory/query.proto", fileDescriptor_78516c77a1ba9513) }

var fileDescriptor_78516c77a1ba9513 = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xcf, 0x4f, 0x13, 0x4d,
	0x18, 0xc7, 0xbb, 0xf0, 0x02, 0x79, 0x87, 0x37, 0xef, 0x61, 0x5e, 0x5e, 0x7e, 0x6c, 0x4b, 0x81,
	0x25, 0x52, 0x0a, 0x71, 0x57, 0xf0, 0x47, 0x4c, 0x3c, 0xc1, 0x41, 0x12, 0x13, 0x04, 0x7b, 0xf0,
	0xe0, 0x45, 0xb7, 0xed, 0xd0, 0x54, 0xb6, 0x3b, 0x65, 0x76, 0x51, 0x89, 0x21, 0x26, 0x7a, 0xf3,
	0xa4, 0xf1, 0x60, 0x62, 0x4c, 0x8c, 0xff, 0x80, 0xfe, 0x1b, 0x1c, 0x49, 0xbc, 0x78, 0x32, 0x06,
	0xfc, 0x43, 0xcc, 0xce, 0x3c, 0xcb, 0xce, 0xd0, 0xe9, 0x76, 0x6b, 0xf4, 0xd6, 0xce, 0x3c, 0xcf,
	0x3c, 0x9f, 0x79, 0xe6, 0x3b, 0xdf, 0x59, 0x34, 0x19, 0xd2, 0x5d, 0xe2, 0xef, 0xb8, 0xb5, 0x90,
	0xb2, 0x03, 0x67, 0x6f, 0x9f, 0xb0, 0x03, 0xbb, 0xcd, 0x68, 0x48, 0x31, 0xf6, 0x69, 0xd5, 0x23,
	0xb6, 0x3c, 0x6f, 0x16, 0x1a, 0x94, 0x36, 0x3c, 0xe2, 0xb8, 0xed, 0xa6, 0xe3, 0xfa, 0x3e, 0x0d,
	0xdd, 0xb0, 0x49, 0xfd, 0x40, 0x64, 0x98, 0x4b, 0x35, 0x1a, 0xb4, 0x68, 0xe0, 0x54, 0xdd, 0x80,
	0x88, 0xa5, 0x9c, 0x47, 0x2b, 0x55, 0x12, 0xba, 0x2b, 0x4e, 0xdb, 0x6d, 0x34, 0x7d, 0x1e, 0x0c,
	0xb1, 0x53, 0x4a, 0xdd, 0xb6, 0xcb, 0xdc, 0x56, 0xbc, 0x4c, 0x51, 0x99, 0xaa, 0x7a, 0x6e, 0x6d,
	0xd7, 0x6b, 0x06, 0x21, 0xa9, 0x77, 0x49, 0xdd, 0x0f, 0xce, 0xa6, 0x66, 0x95, 0xa9, 0x96, 0x1b,
	0x84, 0x84, 0xdd, 0x6f, 0x35, 0xfd, 0x90, 0x30, 0x88, 0x30, 0xd5, 0x08, 0x3e, 0x15, 0x74, 0x5f,
	0x98, 0xf5, 0x60, 0x8a, 0xe7, 0xd5, 0x36, 0xd2, 0xc7, 0x7e, 0x92, 0x29, 0x37, 0x25, 0x6e, 0x47,
	0x8d, 0x36, 0xe3, 0x46, 0x8c, 0x35, 0x68, 0x83, 0xf2, 0x9f, 0x4e, 0xf4, 0x4b, 0x8c, 0x5a, 0x63,
	0x08, 0xdf, 0x89, 0x1a, 0xb8, 0xcd, 0x1b, 0x53, 0x21, 0x7b, 0xfb, 0x24, 0x08, 0xad, 0x2d, 0xf4,
	0x9f, 0x32, 0x1a, 0xb4, 0xa9, 0x1f, 0x10, 0x7c, 0x1d, 0x0d, 0x8b, 0x06, 0x4e, 0x1a, 0xb3, 0xc6,
	0xe2, 0xe8, 0xaa, 0x69, 0x77, 0x1e, 0x9d, 0x2d, 0x72, 0xd6, 0xff, 0x3a, 0xfa, 0x36, 0x93, 0xab,
	0x40, 0xbc, 0x75, 0x0d, 0x99, 0x7c, 0xc1, 0x0d, 0x12, 0xae, 0x27, 0x7d, 0x86, 0x72, 0x78, 0x12,
	0x8d, 0xb8, 0xf5, 0x3a, 0x23, 0x81, 0x58, 0xf8, 0xef, 0x4a, 0xfc, 0xd7, 0xda, 0x41, 0x79, 0x6d,
	0x1e, 0x00, 0x6d, 0xa0, 0x51, 0xe9, 0xd8, 0x80, 0x6a, 0x46, 0x47, 0x25, 0x65, 0x03, 0x9a, 0x9c,
	0x69, 0xd5, 0x81, 0x6f, 0xcd, 0xf3, 0x34, 0x7c, 0x37, 0x11, 0x4a, 0x74, 0x05, 0x55, 0x16, 0x6c,
	0xd1, 0x6f, 0x3b, 0xea, 0xb7, 0x2d, 0xf4, 0x0c, 0x5d, 0xb7, 0xb7, 0xdd, 0x06, 0x81, 0xdc, 0x8a,
	0x94, 0x69, 0x7d, 0x36, 0x60, 0x3b, 0xe7, 0xcb, 0x74, 0xdb, 0xce, 0xe0, 0xaf, 0x6d, 0x07, 0x6f,
	0x28, 0xc0, 0x03, 0x1c, 0xb8, 0xd4, 0x13, 0x58, 0x50, 0x28, 0xc4, 0x13, 0xe8, 0xff, 0xb8, 0xff,
	0xdb, 0x5c, 0xff, 0xb1, 0x42, 0x2a, 0x68, 0xfc, 0xfc, 0x44, 0x22, 0x12, 0x31, 0x92, 0x2e, 0x92,
	0x28, 0x22, 0x16, 0x89, 0xf8, 0x67, 0x4d, 0x27, 0x87, 0xbd, 0xc9, 0x6f, 0xd4, 0x26, 0xbf, 0x35,
	0x71, 0xc9, 0x87, 0xa8, 0xa0, 0x9f, 0x86, 0xc2, 0xb7, 0xd0, 0x3f, 0xf2, 0x38, 0x94, 0x9f, 0xd5,
	0x95, 0x97, 0xe3, 0x00, 0x42, 0xc9, 0xb5, 0x56, 0x93, 0xed, 0x89, 0x91, 0xa0, 0xb7, 0x56, 0xef,
	0xa2, 0x89, 0x8e, 0x1c, 0x40, 0xbb, 0x81, 0x46, 0xc0, 0x01, 0x80, 0x2a, 0xaf, 0xa5, 0x12, 0x21,
	0x00, 0x14, 0x67, 0x58, 0x0f, 0x80, 0x65, 0xcd, 0xf3, 0xce, 0xb1, 0xfc, 0x2e, 0x5d, 0x7e, 0x30,
	0x00, 0x5d, 0x2e, 0xa1, 0x43, 0x1f, 0xec, 0x0f, 0xfd, 0xcf, 0xe9, 0x90, 0x75, 0xd3, 0x21, 0xeb,
	0xd0, 0x21, 0xeb, 0xa9, 0x43, 0xa6, 0xe8, 0x90, 0x59, 0x05, 0x9d, 0x59, 0x9d, 0x55, 0xd4, 0x5a,
	0x12, 0x93, 0xef, 0xb0, 0x34, 0x9c, 0xcd, 0x92, 0x62, 0x00, 0x39, 0xd3, 0x1a, 0x47, 0x63, 0x71,
	0x9d, 0xad, 0xc8, 0xe6, 0xe3, 0xfa, 0xb7, 0x93, 0x56, 0xc0, 0x38, 0x54, 0xbe, 0x8a, 0x86, 0xf8,
	0x00, 0xd4, 0x9c, 0xd2, 0xd5, 0xe4, 0x01, 0x50, 0x4d, 0x44, 0xaf, 0x7e, 0x1a, 0x45, 0x43, 0x7c,
	0x41, 0x7c, 0x18, 0x75, 0x2c, 0xb2, 0x6b, 0xbc, 0xa0, 0xcb, 0xed, 0x7c, 0x27, 0xcc, 0x52, 0xcf,
	0x38, 0xc1, 0x66, 0x59, 0xcf, 0xbf, 0xfc, 0x78, 0x33, 0x50, 0xc0, 0xa6, 0xc3, 0x13, 0x1c, 0xcd,
	0xa3, 0x8c, 0x3f, 0x1a, 0x72, 0xeb, 0xea, 0xd8, 0xee, 0xba, 0xb8, 0xf6, 0x15, 0x31, 0x9d, 0xcc,
	0xf1, 0x00, 0xb5, 0xc2, 0xa1, 0x96, 0x71, 0x59, 0x07, 0x25, 0xd9, 0xa9, 0xf3, 0x14, 0xae, 0xf8,
	0x21, 0x7e, 0x67, 0xa0, 0x7f, 0xa5, 0xa5, 0xd6, 0x3c, 0x2f, 0x05, 0x53, 0xfb, 0x98, 0xa4, 0x60,
	0xea, 0x5f, 0x05, 0xab, 0xc4, 0x31, 0xe7, 0xf0, 0x4c, 0x0f, 0x4c, 0xfc, 0xc2, 0x88, 0xad, 0x17,
	0x97, 0xd3, 0x7a, 0xa1, 0x38, 0xb9, 0xb9, 0x94, 0x25, 0x34, 0xdb, 0x31, 0xf2, 0xd2, 0xef, 0x0d,
	0xd5, 0x87, 0x71, 0xea, 0xb9, 0x68, 0x8c, 0xde, 0xbc, 0x94, 0x3d, 0x01, 0xb8, 0xca, 0x9c, 0x6b,
	0x1e, 0xcf, 0xe9, 0xb8, 0x94, 0xaf, 0x33, 0xfc, 0xda, 0x40, 0x23, 0xe0, 0x56, 0x38, 0x75, 0xeb,
	0xaa, 0xd7, 0x9a, 0xcb, 0x99, 0x62, 0x81, 0xe7, 0x22, 0xe7, 0x29, 0xe1, 0x0b, 0x5a, 0x1e, 0x11,
	0x2c, 0xa9, 0xea, 0xa5, 0x81, 0x10, 0x2c, 0x11, 0x29, 0x6a, 0x29, 0x4d, 0x21, 0x99, 0xb1, 0x3a,
	0xbd, 0xdc, 0x9a, 0xe7, 0x58, 0xd3, 0x38, 0x9f, 0x82, 0x95, 0xa8, 0x88, 0x65, 0x50, 0x11, 0xcb,
	0xae, 0x22, 0xd6, 0x87, 0x8a, 0x18, 0x7e, 0xab, 0x98, 0x01, 0xcb, 0x6a, 0x06, 0xac, 0x4f, 0x33,
	0x60, 0xfd, 0xde, 0x32, 0x86, 0x9f, 0x81, 0xcd, 0xe2, 0xc5, 0xb4, 0x12, 0xb2, 0x65, 0x9b, 0xe5,
	0x0c, 0x91, 0x80, 0x31, 0xc7, 0x31, 0xf2, 0x78, 0x4a, 0x87, 0xc1, 0x3f, 0xf7, 0xd7, 0xaf, 0x1c,
	0x9d, 0x14, 0x8d, 0xe3, 0x93, 0xa2, 0xf1, 0xfd, 0xa4, 0x68, 0xbc, 0x3a, 0x2d, 0xe6, 0x8e, 0x4f,
	0x8b, 0xb9, 0xaf, 0xa7, 0xc5, 0xdc, 0x3d, 0x53, 0xe4, 0x3c, 0x51, 0xb3, 0xc2, 0x83, 0x36, 0x09,
	0xaa, 0xc3, 0xfc, 0x7b, 0xff, 0xf2, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x68, 0x10, 0x7d,
	0x88, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Blacklisted by index.
	Blacklisted(ctx context.Context, in *QueryGetBlacklistedRequest, opts ...grpc.CallOption) (*QueryGetBlacklistedResponse, error)
	// Queries a list of Blacklisted items.
	BlacklistedAll(ctx context.Context, in *QueryAllBlacklistedRequest, opts ...grpc.CallOption) (*QueryAllBlacklistedResponse, error)
	// Queries a Paused by index.
	Paused(ctx context.Context, in *QueryGetPausedRequest, opts ...grpc.CallOption) (*QueryGetPausedResponse, error)
	// Queries a MasterMinter by index.
	MasterMinter(ctx context.Context, in *QueryGetMasterMinterRequest, opts ...grpc.CallOption) (*QueryGetMasterMinterResponse, error)
	// Queries a Minters by index.
	Minters(ctx context.Context, in *QueryGetMintersRequest, opts ...grpc.CallOption) (*QueryGetMintersResponse, error)
	// Queries a list of Minters items.
	MintersAll(ctx context.Context, in *QueryAllMintersRequest, opts ...grpc.CallOption) (*QueryAllMintersResponse, error)
	// Queries a Pauser by index.
	Pauser(ctx context.Context, in *QueryGetPauserRequest, opts ...grpc.CallOption) (*QueryGetPauserResponse, error)
	// Queries a Blacklister by index.
	Blacklister(ctx context.Context, in *QueryGetBlacklisterRequest, opts ...grpc.CallOption) (*QueryGetBlacklisterResponse, error)
	// Queries a Owner by index.
	Owner(ctx context.Context, in *QueryGetOwnerRequest, opts ...grpc.CallOption) (*QueryGetOwnerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Blacklisted(ctx context.Context, in *QueryGetBlacklistedRequest, opts ...grpc.CallOption) (*QueryGetBlacklistedResponse, error) {
	out := new(QueryGetBlacklistedResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/Blacklisted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BlacklistedAll(ctx context.Context, in *QueryAllBlacklistedRequest, opts ...grpc.CallOption) (*QueryAllBlacklistedResponse, error) {
	out := new(QueryAllBlacklistedResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/BlacklistedAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Paused(ctx context.Context, in *QueryGetPausedRequest, opts ...grpc.CallOption) (*QueryGetPausedResponse, error) {
	out := new(QueryGetPausedResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/Paused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MasterMinter(ctx context.Context, in *QueryGetMasterMinterRequest, opts ...grpc.CallOption) (*QueryGetMasterMinterResponse, error) {
	out := new(QueryGetMasterMinterResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/MasterMinter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Minters(ctx context.Context, in *QueryGetMintersRequest, opts ...grpc.CallOption) (*QueryGetMintersResponse, error) {
	out := new(QueryGetMintersResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/Minters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MintersAll(ctx context.Context, in *QueryAllMintersRequest, opts ...grpc.CallOption) (*QueryAllMintersResponse, error) {
	out := new(QueryAllMintersResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/MintersAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pauser(ctx context.Context, in *QueryGetPauserRequest, opts ...grpc.CallOption) (*QueryGetPauserResponse, error) {
	out := new(QueryGetPauserResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/Pauser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Blacklister(ctx context.Context, in *QueryGetBlacklisterRequest, opts ...grpc.CallOption) (*QueryGetBlacklisterResponse, error) {
	out := new(QueryGetBlacklisterResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/Blacklister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Owner(ctx context.Context, in *QueryGetOwnerRequest, opts ...grpc.CallOption) (*QueryGetOwnerResponse, error) {
	out := new(QueryGetOwnerResponse)
	err := c.cc.Invoke(ctx, "/noble.tokenfactory.Query/Owner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Blacklisted by index.
	Blacklisted(context.Context, *QueryGetBlacklistedRequest) (*QueryGetBlacklistedResponse, error)
	// Queries a list of Blacklisted items.
	BlacklistedAll(context.Context, *QueryAllBlacklistedRequest) (*QueryAllBlacklistedResponse, error)
	// Queries a Paused by index.
	Paused(context.Context, *QueryGetPausedRequest) (*QueryGetPausedResponse, error)
	// Queries a MasterMinter by index.
	MasterMinter(context.Context, *QueryGetMasterMinterRequest) (*QueryGetMasterMinterResponse, error)
	// Queries a Minters by index.
	Minters(context.Context, *QueryGetMintersRequest) (*QueryGetMintersResponse, error)
	// Queries a list of Minters items.
	MintersAll(context.Context, *QueryAllMintersRequest) (*QueryAllMintersResponse, error)
	// Queries a Pauser by index.
	Pauser(context.Context, *QueryGetPauserRequest) (*QueryGetPauserResponse, error)
	// Queries a Blacklister by index.
	Blacklister(context.Context, *QueryGetBlacklisterRequest) (*QueryGetBlacklisterResponse, error)
	// Queries a Owner by index.
	Owner(context.Context, *QueryGetOwnerRequest) (*QueryGetOwnerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Blacklisted(ctx context.Context, req *QueryGetBlacklistedRequest) (*QueryGetBlacklistedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blacklisted not implemented")
}
func (*UnimplementedQueryServer) BlacklistedAll(ctx context.Context, req *QueryAllBlacklistedRequest) (*QueryAllBlacklistedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlacklistedAll not implemented")
}
func (*UnimplementedQueryServer) Paused(ctx context.Context, req *QueryGetPausedRequest) (*QueryGetPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paused not implemented")
}
func (*UnimplementedQueryServer) MasterMinter(ctx context.Context, req *QueryGetMasterMinterRequest) (*QueryGetMasterMinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MasterMinter not implemented")
}
func (*UnimplementedQueryServer) Minters(ctx context.Context, req *QueryGetMintersRequest) (*QueryGetMintersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Minters not implemented")
}
func (*UnimplementedQueryServer) MintersAll(ctx context.Context, req *QueryAllMintersRequest) (*QueryAllMintersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintersAll not implemented")
}
func (*UnimplementedQueryServer) Pauser(ctx context.Context, req *QueryGetPauserRequest) (*QueryGetPauserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pauser not implemented")
}
func (*UnimplementedQueryServer) Blacklister(ctx context.Context, req *QueryGetBlacklisterRequest) (*QueryGetBlacklisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blacklister not implemented")
}
func (*UnimplementedQueryServer) Owner(ctx context.Context, req *QueryGetOwnerRequest) (*QueryGetOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Owner not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Blacklisted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlacklistedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Blacklisted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/Blacklisted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Blacklisted(ctx, req.(*QueryGetBlacklistedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BlacklistedAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlacklistedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BlacklistedAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/BlacklistedAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BlacklistedAll(ctx, req.(*QueryAllBlacklistedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Paused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Paused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/Paused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Paused(ctx, req.(*QueryGetPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MasterMinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMasterMinterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MasterMinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/MasterMinter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MasterMinter(ctx, req.(*QueryGetMasterMinterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Minters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMintersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Minters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/Minters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Minters(ctx, req.(*QueryGetMintersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MintersAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMintersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MintersAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/MintersAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MintersAll(ctx, req.(*QueryAllMintersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pauser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPauserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pauser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/Pauser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pauser(ctx, req.(*QueryGetPauserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Blacklister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlacklisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Blacklister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/Blacklister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Blacklister(ctx, req.(*QueryGetBlacklisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Owner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Owner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.tokenfactory.Query/Owner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Owner(ctx, req.(*QueryGetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.tokenfactory.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Blacklisted",
			Handler:    _Query_Blacklisted_Handler,
		},
		{
			MethodName: "BlacklistedAll",
			Handler:    _Query_BlacklistedAll_Handler,
		},
		{
			MethodName: "Paused",
			Handler:    _Query_Paused_Handler,
		},
		{
			MethodName: "MasterMinter",
			Handler:    _Query_MasterMinter_Handler,
		},
		{
			MethodName: "Minters",
			Handler:    _Query_Minters_Handler,
		},
		{
			MethodName: "MintersAll",
			Handler:    _Query_MintersAll_Handler,
		},
		{
			MethodName: "Pauser",
			Handler:    _Query_Pauser_Handler,
		},
		{
			MethodName: "Blacklister",
			Handler:    _Query_Blacklister_Handler,
		},
		{
			MethodName: "Owner",
			Handler:    _Query_Owner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokenfactory/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetBlacklistedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlacklistedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlacklistedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlacklistedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlacklistedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlacklistedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Blacklisted.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllBlacklistedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlacklistedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlacklistedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlacklistedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlacklistedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlacklistedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blacklisted) > 0 {
		for iNdEx := len(m.Blacklisted) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Blacklisted[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Paused.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMasterMinterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMasterMinterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMasterMinterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetMasterMinterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMasterMinterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMasterMinterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MasterMinter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMintersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMintersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMintersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMintersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMintersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMintersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Minters.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMintersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMintersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMintersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMintersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMintersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMintersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Minters) > 0 {
		for iNdEx := len(m.Minters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Minters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPauserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPauserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPauserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPauserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPauserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPauserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pauser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetBlacklisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlacklisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlacklisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetBlacklisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlacklisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlacklisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Blacklister.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Owner.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetBlacklistedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlacklistedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Blacklisted.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllBlacklistedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlacklistedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blacklisted) > 0 {
		for _, e := range m.Blacklisted {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Paused.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMasterMinterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetMasterMinterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MasterMinter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMintersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMintersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Minters.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMintersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMintersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Minters) > 0 {
		for _, e := range m.Minters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPauserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPauserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pauser.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetBlacklisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetBlacklisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Blacklister.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Owner.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlacklistedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlacklistedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlacklistedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlacklistedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlacklistedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlacklistedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Blacklisted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlacklistedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlacklistedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlacklistedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlacklistedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlacklistedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlacklistedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blacklisted = append(m.Blacklisted, Blacklisted{})
			if err := m.Blacklisted[len(m.Blacklisted)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Paused.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMasterMinterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMasterMinterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMasterMinterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMasterMinterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMasterMinterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMasterMinterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterMinter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MasterMinter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMintersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMintersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMintersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMintersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMintersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMintersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Minters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMintersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMintersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMintersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMintersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMintersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMintersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Minters = append(m.Minters, Minters{})
			if err := m.Minters[len(m.Minters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPauserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPauserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPauserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPauserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPauserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPauserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pauser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pauser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlacklisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlacklisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlacklisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlacklisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlacklisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlacklisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklister", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Blacklister.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
